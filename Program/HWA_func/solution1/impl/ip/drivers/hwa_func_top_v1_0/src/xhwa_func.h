// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XHWA_FUNC_H
#define XHWA_FUNC_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xhwa_func_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Hwa_io_BaseAddress;
} XHwa_func_Config;
#endif

typedef struct {
    u32 Hwa_io_BaseAddress;
    u32 IsReady;
} XHwa_func;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XHwa_func_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XHwa_func_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XHwa_func_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XHwa_func_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XHwa_func_Initialize(XHwa_func *InstancePtr, u16 DeviceId);
XHwa_func_Config* XHwa_func_LookupConfig(u16 DeviceId);
int XHwa_func_CfgInitialize(XHwa_func *InstancePtr, XHwa_func_Config *ConfigPtr);
#else
int XHwa_func_Initialize(XHwa_func *InstancePtr, const char* InstanceName);
int XHwa_func_Release(XHwa_func *InstancePtr);
#endif

void XHwa_func_Start(XHwa_func *InstancePtr);
u32 XHwa_func_IsDone(XHwa_func *InstancePtr);
u32 XHwa_func_IsIdle(XHwa_func *InstancePtr);
u32 XHwa_func_IsReady(XHwa_func *InstancePtr);
void XHwa_func_EnableAutoRestart(XHwa_func *InstancePtr);
void XHwa_func_DisableAutoRestart(XHwa_func *InstancePtr);

void XHwa_func_SetX(XHwa_func *InstancePtr, u32 Data);
u32 XHwa_func_GetX(XHwa_func *InstancePtr);
void XHwa_func_SetY(XHwa_func *InstancePtr, u32 Data);
u32 XHwa_func_GetY(XHwa_func *InstancePtr);
u32 XHwa_func_GetId(XHwa_func *InstancePtr);
u32 XHwa_func_GetIdVld(XHwa_func *InstancePtr);
u32 XHwa_func_GetOut_r(XHwa_func *InstancePtr);
u32 XHwa_func_GetOut_rVld(XHwa_func *InstancePtr);

void XHwa_func_InterruptGlobalEnable(XHwa_func *InstancePtr);
void XHwa_func_InterruptGlobalDisable(XHwa_func *InstancePtr);
void XHwa_func_InterruptEnable(XHwa_func *InstancePtr, u32 Mask);
void XHwa_func_InterruptDisable(XHwa_func *InstancePtr, u32 Mask);
void XHwa_func_InterruptClear(XHwa_func *InstancePtr, u32 Mask);
u32 XHwa_func_InterruptGetEnabled(XHwa_func *InstancePtr);
u32 XHwa_func_InterruptGetStatus(XHwa_func *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
