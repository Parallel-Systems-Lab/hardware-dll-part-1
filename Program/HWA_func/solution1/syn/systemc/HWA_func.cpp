// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "HWA_func.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic HWA_func::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic HWA_func::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> HWA_func::ap_ST_st1_fsm_0 = "000000";
const sc_lv<6> HWA_func::ap_ST_st2_fsm_1 = "1";
const sc_lv<6> HWA_func::ap_ST_st3_fsm_2 = "10";
const sc_lv<6> HWA_func::ap_ST_st4_fsm_3 = "11";
const sc_lv<6> HWA_func::ap_ST_st5_fsm_4 = "100";
const sc_lv<6> HWA_func::ap_ST_st6_fsm_5 = "101";
const sc_lv<6> HWA_func::ap_ST_st7_fsm_6 = "110";
const sc_lv<6> HWA_func::ap_ST_st8_fsm_7 = "111";
const sc_lv<6> HWA_func::ap_ST_st9_fsm_8 = "1000";
const sc_lv<6> HWA_func::ap_ST_st10_fsm_9 = "1001";
const sc_lv<6> HWA_func::ap_ST_st11_fsm_10 = "1010";
const sc_lv<6> HWA_func::ap_ST_st12_fsm_11 = "1011";
const sc_lv<6> HWA_func::ap_ST_st13_fsm_12 = "1100";
const sc_lv<6> HWA_func::ap_ST_st14_fsm_13 = "1101";
const sc_lv<6> HWA_func::ap_ST_st15_fsm_14 = "1110";
const sc_lv<6> HWA_func::ap_ST_st16_fsm_15 = "1111";
const sc_lv<6> HWA_func::ap_ST_st17_fsm_16 = "10000";
const sc_lv<6> HWA_func::ap_ST_st18_fsm_17 = "10001";
const sc_lv<6> HWA_func::ap_ST_st19_fsm_18 = "10010";
const sc_lv<6> HWA_func::ap_ST_st20_fsm_19 = "10011";
const sc_lv<6> HWA_func::ap_ST_st21_fsm_20 = "10100";
const sc_lv<6> HWA_func::ap_ST_st22_fsm_21 = "10101";
const sc_lv<6> HWA_func::ap_ST_st23_fsm_22 = "10110";
const sc_lv<6> HWA_func::ap_ST_st24_fsm_23 = "10111";
const sc_lv<6> HWA_func::ap_ST_st25_fsm_24 = "11000";
const sc_lv<6> HWA_func::ap_ST_st26_fsm_25 = "11001";
const sc_lv<6> HWA_func::ap_ST_st27_fsm_26 = "11010";
const sc_lv<6> HWA_func::ap_ST_st28_fsm_27 = "11011";
const sc_lv<6> HWA_func::ap_ST_st29_fsm_28 = "11100";
const sc_lv<6> HWA_func::ap_ST_st30_fsm_29 = "11101";
const sc_lv<6> HWA_func::ap_ST_st31_fsm_30 = "11110";
const sc_lv<6> HWA_func::ap_ST_st32_fsm_31 = "11111";
const sc_lv<6> HWA_func::ap_ST_st33_fsm_32 = "100000";
const sc_lv<6> HWA_func::ap_ST_st34_fsm_33 = "100001";
const sc_lv<6> HWA_func::ap_ST_st35_fsm_34 = "100010";
const sc_lv<6> HWA_func::ap_ST_st36_fsm_35 = "100011";
const sc_lv<32> HWA_func::ap_const_lv32_7D = "1111101";
const sc_lv<1> HWA_func::ap_const_lv1_0 = "0";
const sc_lv<32> HWA_func::ap_const_lv32_0 = "00000000000000000000000000000000";

HWA_func::HWA_func(sc_module_name name) : sc_module(name), mVcdFile(0) {
    HWA_func_srem_32ns_32ns_32_35_seq_U0 = new HWA_func_srem_32ns_32ns_32_35_seq<0,35,32,32,32>("HWA_func_srem_32ns_32ns_32_35_seq_U0");
    HWA_func_srem_32ns_32ns_32_35_seq_U0->clk(ap_clk);
    HWA_func_srem_32ns_32ns_32_35_seq_U0->reset(ap_rst);
    HWA_func_srem_32ns_32ns_32_35_seq_U0->start(HWA_func_srem_32ns_32ns_32_35_seq_U0_ap_start);
    HWA_func_srem_32ns_32ns_32_35_seq_U0->din0(grp_fu_86_p0);
    HWA_func_srem_32ns_32ns_32_35_seq_U0->din1(grp_fu_86_p1);
    HWA_func_srem_32ns_32ns_32_35_seq_U0->ce(grp_fu_86_ce);
    HWA_func_srem_32ns_32ns_32_35_seq_U0->dout(grp_fu_86_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_HWA_func_srem_32ns_32ns_32_35_seq_U0_ap_start);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_grp_fu_86_ce);

    SC_METHOD(thread_grp_fu_86_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( b_reg_67 );

    SC_METHOD(thread_grp_fu_86_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( c_reg_57 );

    SC_METHOD(thread_id);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_id_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_CS_fsm );
    sensitive << ( b_reg_67 );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_tmp_fu_80_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( c_reg_57 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_80_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "HWA_func_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, id, "(port)id");
    sc_trace(mVcdFile, id_ap_vld, "(port)id_ap_vld");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, grp_fu_86_p2, "grp_fu_86_p2");
    sc_trace(mVcdFile, c_reg_57, "c_reg_57");
    sc_trace(mVcdFile, b_reg_67, "b_reg_67");
    sc_trace(mVcdFile, tmp_fu_80_p2, "tmp_fu_80_p2");
    sc_trace(mVcdFile, grp_fu_86_p0, "grp_fu_86_p0");
    sc_trace(mVcdFile, grp_fu_86_p1, "grp_fu_86_p1");
    sc_trace(mVcdFile, HWA_func_srem_32ns_32ns_32_35_seq_U0_ap_start, "HWA_func_srem_32ns_32ns_32_35_seq_U0_ap_start");
    sc_trace(mVcdFile, grp_fu_86_ce, "grp_fu_86_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("HWA_func.hdltvin.dat");
    mHdltvoutHandle.open("HWA_func.hdltvout.dat");
}

HWA_func::~HWA_func() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete HWA_func_srem_32ns_32ns_32_35_seq_U0;
}

void HWA_func::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,6,6>(ap_ST_st36_fsm_35, ap_CS_fsm.read())) {
        b_reg_67 = c_reg_57.read();
    } else if ((esl_seteq<1,6,6>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        b_reg_67 = y.read();
    }
    if (esl_seteq<1,6,6>(ap_ST_st36_fsm_35, ap_CS_fsm.read())) {
        c_reg_57 = grp_fu_86_p2.read();
    } else if ((esl_seteq<1,6,6>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        c_reg_57 = x.read();
    }
}

void HWA_func::thread_HWA_func_srem_32ns_32ns_32_35_seq_U0_ap_start() {
    if ((esl_seteq<1,6,6>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(tmp_fu_80_p2.read(), ap_const_lv1_0))) {
        HWA_func_srem_32ns_32ns_32_35_seq_U0_ap_start = ap_const_logic_1;
    } else {
        HWA_func_srem_32ns_32ns_32_35_seq_U0_ap_start = ap_const_logic_0;
    }
}

void HWA_func::thread_ap_done() {
    if ((esl_seteq<1,6,6>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_80_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void HWA_func::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,6,6>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void HWA_func::thread_ap_ready() {
    if ((esl_seteq<1,6,6>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_80_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void HWA_func::thread_grp_fu_86_ce() {
    grp_fu_86_ce = ap_const_logic_1;
}

void HWA_func::thread_grp_fu_86_p0() {
    grp_fu_86_p0 = b_reg_67.read();
}

void HWA_func::thread_grp_fu_86_p1() {
    grp_fu_86_p1 = c_reg_57.read();
}

void HWA_func::thread_id() {
    id = ap_const_lv32_7D;
}

void HWA_func::thread_id_ap_vld() {
    if ((esl_seteq<1,6,6>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        id_ap_vld = ap_const_logic_1;
    } else {
        id_ap_vld = ap_const_logic_0;
    }
}

void HWA_func::thread_out_r() {
    out_r = b_reg_67.read();
}

void HWA_func::thread_out_r_ap_vld() {
    if ((esl_seteq<1,6,6>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_80_p2.read(), ap_const_lv1_0))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void HWA_func::thread_tmp_fu_80_p2() {
    tmp_fu_80_p2 = (!c_reg_57.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_57.read() == ap_const_lv32_0);
}

void HWA_func::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(tmp_fu_80_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
            break;
        case 20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
            break;
        case 21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
            break;
        case 22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
            break;
        case 23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
            break;
        case 24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
            break;
        case 25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
            break;
        case 26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
            break;
        case 27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
            break;
        case 28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
            break;
        case 29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
            break;
        case 30 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
            break;
        case 31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
            break;
        case 33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
            break;
        case 34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
            break;
        case 35 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void HWA_func::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"id\" :  \"" << id.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"id_ap_vld\" :  \"" << id_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

